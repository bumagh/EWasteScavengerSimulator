{"version":3,"sources":["file:///D:/2work/2GameDev/EWasteScavengerSimulatorCocos2d/assets/Libraries/Algorithm.ts"],"names":["Algorithm","math","Validator","Debug","RandomItemFromMap","map","keys","Array","from","randomIndex","Math","floor","random","length","randomKey","get","RandomItemFormList","list","Count","ItemAt","RandomItemFormArray","array","FormatBigNumber","num","undefined","formattedNum","numStr","toString","dotIndex","indexOf","substring","slice","RemoveColonAndBracesToArray","source","separator","IsStringIllegal","replace","split","ConvertToNewlines","str","result","i","GetRandomElements","count","Error","usedIndices","Set","GetRandomNumber","has","add","push","max","min","round","GetRandomItemByWeight","seed","size","totalWeight","item","randomValue","pseudoRandomRange","currentWeight","tempItem","RemoveItemFromArray","element","IsObjectIllegal","index","splice","ConvertMapToArray","Shuffle","currentIndex","temporaryValue","TruncateString","target","maxLength","suffix","JSONStrToNoKey","jsonStr","jsonObject","JSON","parse","Object","values","key","newString","join","Log"],"mappings":"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","sourcesContent":["import { math } from \"cc\";\nimport { List } from \"./List\";\nimport { Validator } from \"./Validator\";\nimport { Debug } from \"./Debug\";\n\nexport class Algorithm\n{\n    /**\n     * 随机获取Map的一个元素的值\n     */\n    public static RandomItemFromMap<TKey, TValue>(map: Map<TKey, TValue>): [TKey, TValue]\n    {\n        var keys = Array.from(map.keys());\n        var randomIndex = Math.floor(Math.random() * keys.length);\n        var randomKey = keys[randomIndex];\n        return [randomKey, map.get(randomKey)];\n    }\n\n    /**\n     * 随机获取泛型列表的一个元素\n     */\n    public static RandomItemFormList<T>(list: List<T>): T\n    {\n        var randomIndex = Math.floor(Math.random() * list.Count);\n        return list.ItemAt(randomIndex);\n    }\n\n    /**\n     * 随机获取泛型数组的一个元素\n     */\n    public static RandomItemFormArray<T>(array: T[]): T\n    {\n        var randomIndex = Math.floor(Math.random() * array.length);\n        return array[randomIndex];\n    }\n\n    /**\n     * 将大数字转换为“W”的形式\n     */\n    public static FormatBigNumber(num: number): string\n    {\n        if (num == undefined)\n            num = 0;\n        if (num > 1000)\n        {\n            num = num / 10000;\n            var formattedNum = \"\";\n            if (num > 1)\n            {\n                const numStr = num.toString();\n                const dotIndex = numStr.indexOf(\".\");\n                formattedNum = numStr.substring(0, dotIndex == -1 ? numStr.length : dotIndex) + \"W\";\n            }\n            else\n            {\n                formattedNum = num.toString().slice(0, 3) + \"W\";\n            }\n            return formattedNum;\n        }\n        else\n        {\n            return num.toString();\n        }\n    }\n\n    /**\n     * 移除字符串里的冒号和大括号，并根据分割符拆分成数组\n     */\n    public static RemoveColonAndBracesToArray(source: string, separator: string = \",\"): string[]\n    {\n        if (Validator.IsStringIllegal(source, \"source\")) return [];\n        return source.replace(/[:{}\"]/g, \"\").split(separator);\n    }\n\n    /**\n     * 将字符串的每个字符拆开，并插入换行符\n     */\n    public static ConvertToNewlines(str: string): string\n    {\n        let result = '';\n        for (let i = 0; i < str.length; i++)\n        {\n            result += str[i];\n            if (i < str.length - 1)\n            {\n                result += '\\n';\n            }\n        }\n        return result;\n    }\n\n    /**\n     * 随机获取数组里的元素\n     */\n    public static GetRandomElements<T>(array: T[], count: number): T[]\n    {\n        if (count > array.length)\n        {\n            throw new Error('Count cannot be greater than the array length.');\n        }\n\n        const result = [];\n        const usedIndices = new Set();\n        while (result.length < count)\n        {\n            const randomIndex = this.GetRandomNumber(array.length - 1, 0);\n            // 检查该索引是否已经被使用过  \n            if (!usedIndices.has(randomIndex))\n            {\n                usedIndices.add(randomIndex);\n                result.push(array[randomIndex]);\n            }\n        }\n        return result;\n    }\n\n    public static GetRandomNumber(max: number, min: number): number\n    {\n        return Math.round(Math.random() * (min - max) + max);\n    }\n\n    public static GetRandomItemByWeight<T>(map: Map<T, number>, seed: number): [T, number] | null\n    {\n        if (map.size === 0)\n            return null;\n\n        var totalWeight: number = 0;\n        for (const item of map)\n            totalWeight += item[1];\n\n        const randomValue = math.pseudoRandomRange(seed, 0, totalWeight);\n        var currentWeight: number = 0;\n        var tempItem: [T, number];\n\n        for (const item of map)\n        {\n            currentWeight += item[1];\n            if (randomValue <= currentWeight)\n                return item;\n            tempItem = item;\n        }\n\n        return tempItem;\n    }\n\n    /**\n     * 移除集合中的指定元素\n     */\n    public static RemoveItemFromArray<T>(array: T[], element: T): boolean\n    {\n        if (Validator.IsObjectIllegal(array, \"array\")) return false;\n        if (Validator.IsObjectIllegal(element, \"element\")) return false;\n        if (array.length == 0) return false;\n        const index = array.indexOf(element);\n        if (index !== -1)\n        {\n            array.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 将Map转换成二维数组\n     */\n    public static ConvertMapToArray<TKey, TValue>(map: Map<TKey, TValue>): [TKey, TValue][]\n    {\n        var array = new Array<[TKey, TValue]>();\n        for (const item of map)\n            array.push(item);\n        return array;\n    }\n\n    /**\n     * 洗牌算法\n     */\n    public static Shuffle<T>(array: T[]): T[]\n    {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n\n        // 当还剩有元素未洗牌  \n        while (0 !== currentIndex)\n        {\n            // 选取剩下的元素\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // 并与当前元素交换\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n    }\n\n    /**\n     * 截断字符串\n     */\n    public static TruncateString(target: string, maxLength: number = 4, suffix = \"...\"): string\n    {\n        if (target.length > maxLength)\n            return `${target.substring(0, maxLength)}${suffix}`;\n        else\n            return target;\n    }\n    public static JSONStrToNoKey(jsonStr: string)\n    {\n        const jsonObject = JSON.parse(jsonStr);\n        const keys = Object.keys(jsonObject);\n        const values = keys.map(key => jsonObject[key]);\n        const newString = values.join(', '); // 输出 \"Alice, 25, New York\"\n        Debug.Log(newString)  \n        return `[${newString}]`;\n    }\n}"]}