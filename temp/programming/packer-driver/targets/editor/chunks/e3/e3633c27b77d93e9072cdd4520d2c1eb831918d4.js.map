{"version":3,"sources":["file:///D:/2work/2GameDev/EWasteScavengerSimulatorCocos2d/assets/Game/Scripts/Common/TouchEventProxy.ts"],"names":["_decorator","CCBoolean","CCString","Component","Validator","EventManager","ccclass","property","TouchEventProxy","onEnable","node","on","touchType","OnTouchEvent","onDisable","off","event","interactable","IsStringIllegal","eventName","Emit"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,S,OAAAA,S;;AACjCC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,Y,iBAAAA,Y;;;;;;;;;OAGH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;iCAGjBQ,e,WADZF,OAAO,CAAC,iBAAD,C,UAGHC,QAAQ,CAACN,SAAD,C,UAGRM,QAAQ,CAACL,QAAD,C,UAGRK,QAAQ,CAACL,QAAD,C,UAGRK,QAAQ,CAACL,QAAD,C,2BAZb,MACaM,eADb,SACqCL,SADrC,CAEA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAacM,QAAAA,QAAQ,GAClB;AACI,eAAKC,IAAL,CAAUC,EAAV,CAAa,KAAKC,SAAlB,EAA6B,KAAKC,YAAlC,EAAgD,IAAhD;AACH;;AAESC,QAAAA,SAAS,GACnB;AACI,eAAKJ,IAAL,CAAUK,GAAV,CAAc,KAAKH,SAAnB,EAA8B,KAAKC,YAAnC,EAAiD,IAAjD;AACH;;AAEOA,QAAAA,YAAY,CAACG,KAAD,EACpB;AACI,cAAI,CAAC,KAAKC,YAAV,EAAwB;AACxB,cAAI;AAAA;AAAA,sCAAUC,eAAV,CAA0B,KAAKC,SAA/B,EAA0C,gBAA1C,CAAJ,EAAiE;AACjE;AAAA;AAAA,4CAAaC,IAAb,CAAkB,KAAKD,SAAvB,EAAkC,IAAlC,EAAwCH,KAAxC;AACH;;AA5BL,O;;;;;iBAEmC,I;;;;;;;iBAGJ,W;;;;;;;iBAGA,E;;;;;;;iBAGD,E","sourcesContent":["import { _decorator, CCBoolean, CCString, Component, EventTouch } from 'cc';\nimport { Validator } from '../../../Libraries/Validator';\nimport { EventManager } from '../../../Libraries/EventManager';\n\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('TouchEventProxy')\nexport class TouchEventProxy extends Component\n{\n    @property(CCBoolean)\n    public interactable: boolean = true;\n\n    @property(CCString)\n    public touchType: string = \"touch-end\";\n\n    @property(CCString)\n    public eventName: string = \"\";\n\n    @property(CCString)\n    public eventArg: string = \"\";\n\n    protected onEnable(): void\n    {\n        this.node.on(this.touchType, this.OnTouchEvent, this);\n    }\n\n    protected onDisable(): void\n    {\n        this.node.off(this.touchType, this.OnTouchEvent, this);\n    }\n\n    private OnTouchEvent(event: EventTouch): void\n    {\n        if (!this.interactable) return;\n        if (Validator.IsStringIllegal(this.eventName, \"this.eventName\")) return;\n        EventManager.Emit(this.eventName, this, event);\n    }\n}"]}