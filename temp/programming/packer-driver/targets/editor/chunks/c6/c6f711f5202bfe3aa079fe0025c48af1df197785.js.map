{"version":3,"sources":["file:///D:/2work/2GameDev/EWasteScavengerSimulatorCocos2d/assets/Game/Scripts/Common/NodeRef.ts"],"names":["_decorator","CCString","Component","find","Debug","Validator","ccclass","property","executionOrder","NodeRef","nodes","Map","visuals","visualsInChildren","onLoad","onEnable","onDisable","onDestroy","GetNode","nodePath","callback","IsObjectIllegal","has","get","node","set","IsObjectEmpty","GetVisual","type","key","component","Error","getComponent","name","GetVisualsInChildren","components","getComponentsInChildren"],"mappings":"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","sourcesContent":["import { _decorator, CCString, Component, find, Node } from 'cc';\nimport { Debug } from '../../../Libraries/Debug';\nimport { Validator } from '../../../Libraries/Validator';\n\n\nconst { ccclass, property, executionOrder } = _decorator;\n\n\n@ccclass('NodeRef')\n@executionOrder(0)\nexport class NodeRef extends Component\n{\n    @property(CCString)\n    public id: string;\n\n    @property(CCString)\n    public type: string;\n\n    protected nodes = new Map<string, Node>();\n    protected visuals = new Map<string, Component>();\n    protected visualsInChildren = new Map<string, Component[]>();\n\n    protected onLoad(): void\n    {\n    }\n\n    protected onEnable(): void\n    {\n    }\n\n    protected onDisable(): void\n    {\n    }\n\n    protected onDestroy(): void\n    {\n    }\n\n    public GetNode(nodePath: string, callback?: (node: Node) => void): Node | null\n    {\n        if (Validator.IsObjectIllegal(nodePath, \"nodePath\")) return null;\n        if (this.nodes.has(nodePath))\n            return this.nodes.get(nodePath);\n        else\n        {\n            var node = find(nodePath, this.node);\n            if (Validator.IsObjectIllegal(node, `node from ${nodePath}`))\n                return null;\n            else\n            {\n                this.nodes.set(nodePath, node);\n                if (!Validator.IsObjectEmpty(callback)) callback(node);\n                return node;\n            }\n        }\n    }\n\n    public GetVisual<T extends Component>(nodePath: string, type: any, callback?: (component: T) => void): T | null\n    {\n        if (Validator.IsObjectIllegal(nodePath, \"nodePath\")) return null;\n        if (Validator.IsObjectIllegal(type, \"type\")) return null;\n        var key = `${nodePath}/${type}`;\n        var component: T;\n        if (this.visuals.has(key))\n        {\n            component = this.visuals.get(key) as T;\n            if (component == null)\n                Debug.Error(`路径为${nodePath}的组件类型转换失败`);\n            return component;\n        }\n        else\n        {\n            var node = this.GetNode(nodePath);\n            if (Validator.IsObjectEmpty(node)) return null;\n            component = node.getComponent(type);\n            if (Validator.IsObjectEmpty(component))\n            {\n                Debug.Error(`节点${node.name}上未找到组件${type}`);\n                return null;\n            }\n            this.visuals.set(key, component);\n            if (!Validator.IsObjectEmpty(callback)) callback(component);\n            return component;\n        }\n    }\n    public GetVisualsInChildren<T extends Component>(nodePath: string, type: any, callback?: (components: T[]) => void): T[] | null\n    {\n        if (Validator.IsObjectIllegal(nodePath, \"nodePath\")) return null;\n        if (Validator.IsObjectIllegal(type, \"type\")) return null;\n        var key = `${nodePath}/${type}`;\n        var components: T[];\n        if (this.visualsInChildren.has(key))\n        {\n            components = this.visualsInChildren.get(key) as T[];\n            if (components == null)\n                Debug.Error(`路径为${nodePath}的组件类型转换失败`);\n            return components;\n        }\n        else\n        {\n            var node = this.GetNode(nodePath);\n            if (Validator.IsObjectEmpty(node)) return null;\n            components = node.getComponentsInChildren(type);\n            if (Validator.IsObjectEmpty(components))\n            {\n                Debug.Error(`${node.name}子节点上未找到组件${type}`);\n                return null;\n            }\n            this.visualsInChildren.set(key, components);\n            if (!Validator.IsObjectEmpty(callback)) callback(components);\n            return components;\n        }\n    }\n}"]}