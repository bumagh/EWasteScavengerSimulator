{"version":3,"sources":["file:///D:/2work/2GameDev/EWasteScavengerSimulatorCocos2d/assets/Game/Scripts/Game/Outline.ts"],"names":["_decorator","CircleCollider2D","Collider2D","Contact2DType","RigidBody2D","tween","Vec3","NodeRef","Algorithm","Debug","ccclass","property","OutlineSpriteEnums","Outline","outlineSpriteNode","outlineSpriteFullNode","doorCollider","doorRgBody","outlineCollider","tweenAnim","isContact","rotateSpeed","level","scale","onLoad","Init","OutlineSpriteThreeQuaters","outlineType","GetNode","GetVisual","OutlineSpriteFill","on","END_CONTACT","OnDoorEndContact","BEGIN_CONTACT","OnOutlineBeginContact","ChangeType","off","enabledContactListener","enabled","active","onDestroy","start","StartCircleAnim","SetSpriteNodeScale","setScale","SetNodeAngle","node","angle","GetRandomNumber","SetOutlineSpriteRotateSpeed","speed","by","repeatForever","selfCollider","otherCollider","contact","Log","scheduleOnce"],"mappings":"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","sourcesContent":["import { _decorator, BoxCollider2D, CircleCollider2D, Collider2D, Component, Contact2DType, IPhysics2DContact, Node, Quat, RigidBody2D, Tween, tween, Vec2, Vec3 } from 'cc';\nimport { NodeRef } from '../Common/NodeRef';\nimport { Algorithm } from '../../../Libraries/Algorithm';\nimport { EventManager } from '../../../Libraries/EventManager';\nimport { Debug } from '../../../Libraries/Debug';\n\nconst { ccclass, property } = _decorator;\nexport enum OutlineSpriteEnums\n{\n    OutlineSpriteThreeQuaters = \"OutlineSpriteThreeQuaters\",\n    OutlineSpriteFill = \"OutlineSpriteFill\",\n    OutlineSpriteHalfDoor = \"OutlineSpriteHalfDoor\",\n}\n@ccclass('Outline')\nexport class Outline extends NodeRef\n{\n    public outlineSpriteNode: Node;\n    public outlineSpriteFullNode: Node;\n    private doorCollider: Collider2D;\n    private doorRgBody: RigidBody2D;\n    private outlineCollider: Collider2D;\n    private tweenAnim: Tween<Node>;\n    public isContact: boolean = false;\n    public rotateSpeed: number = 1;\n    public level: number = 1;\n    public scale: number = 1;\n    protected onLoad(): void\n    {\n        this.Init(OutlineSpriteEnums.OutlineSpriteThreeQuaters);\n    }\n    private Init(outlineType: OutlineSpriteEnums)\n    {\n        this.outlineSpriteNode = this.GetNode(outlineType);\n        this.outlineCollider = this.GetVisual(outlineType, Collider2D);\n        this.outlineSpriteFullNode = this.GetNode(OutlineSpriteEnums.OutlineSpriteFill);\n        if (outlineType != OutlineSpriteEnums.OutlineSpriteFill)\n        {\n            this.doorCollider = this.GetVisual(outlineType + \"/Door\", CircleCollider2D);\n            this.doorRgBody = this.GetVisual(outlineType + \"/Door\", RigidBody2D);\n            this.doorCollider.on(Contact2DType.END_CONTACT, this.OnDoorEndContact, this);\n        }\n\n        this.outlineCollider.on(Contact2DType.BEGIN_CONTACT, this.OnOutlineBeginContact, this)\n    }\n    public ChangeType(outlineType: OutlineSpriteEnums)\n    {\n        this.doorCollider.off(Contact2DType.END_CONTACT, this.OnDoorEndContact, this);\n        this.doorRgBody.enabledContactListener = false;\n        this.doorCollider.enabled = false;\n        this.outlineSpriteNode.active = false;\n\n        // this.outlineSpriteNode.active = false;\n        // this.Init(outlineType);\n        // this.SetSpriteNodeScale(this.scale);\n        // this.outlineSpriteNode.active = true;\n    }\n    protected onDestroy(): void\n    {\n        this.doorCollider.off(Contact2DType.END_CONTACT, this.OnDoorEndContact, this);\n        this.outlineCollider.off(Contact2DType.END_CONTACT, this.OnOutlineBeginContact, this);\n    }\n    start()\n    {\n        this.StartCircleAnim(this.outlineSpriteNode);\n    }\n    public SetSpriteNodeScale(scale: number)\n    {\n        this.outlineSpriteNode.setScale(new Vec3(scale, scale, 1));\n    }\n    public SetNodeAngle()\n    {\n        this.node.angle = Algorithm.GetRandomNumber(360, 0);\n    }\n\n    public SetOutlineSpriteRotateSpeed(speed: number = 1)\n    {\n        this.rotateSpeed = speed;\n    }\n    private StartCircleAnim(node: Node): void\n    {\n        this.tweenAnim = tween(node)\n            .by(0.02, {\n                angle: this.rotateSpeed\n            }).repeatForever().start();\n    }\n    OnDoorEndContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null)\n    {\n        // Debug.Log(this.node.name);\n        // Debug.Log(selfCollider.node.parent.parent.name);\n        if (this.isContact == true) return;\n        this.isContact = true;\n        Debug.Log(\"OnDoorEndContact\")\n        // this.tweenAnim.stop();\n        // // this.SetNodeAngle();\n        // EventManager.Emit(\"OnBallLeaveDoor\", this.node, selfCollider, otherCollider, contact);\n        this.scheduleOnce(() =>\n        {\n            this.ChangeType(OutlineSpriteEnums.OutlineSpriteFill);\n            // this.node.removeFromParent();\n        });\n    }\n    OnOutlineBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null)\n    {\n        Debug.Log(\"OnOutlineBeginContact\")\n        // if (this.isContact == true) return;\n        // this.isContact = true;\n        // this.tweenAnim.stop();\n        // this.SetNodeAngle();\n        // EventManager.Emit(\"OnBallLeaveDoor\", this.node, selfCollider, otherCollider, contact);\n        // this.scheduleOnce(() =>\n        // {\n        //     this.node.removeFromParent();\n        // });\n    }\n\n}\n\n\n"]}