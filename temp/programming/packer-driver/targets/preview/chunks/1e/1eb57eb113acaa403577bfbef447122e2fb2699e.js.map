{"version":3,"sources":["file:///D:/2work/2GameDev/EWasteScavengerSimulatorCocos2d/assets/Game/scripts-001/HeroSlot.ts"],"names":["_decorator","Component","Label","Sprite","SpriteFrame","ccclass","property","getRandomInt","min","max","ratio","Math","random","floor","HeroSlot","onLoad","refresh","bgIdx","sfBorders","length","heroIdx","sfHeroes","starIdx","spStars","rankIdx","sfRanks","attIdx","sfAttributes","levelIdx","labelLevel","string","spRank","spriteFrame","refreshStars","spBorder","spAttribute","spHero","count","i","enabled"],"mappings":"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","sourcesContent":["import { _decorator, Component, Label, Sprite, SpriteFrame } from \"cc\";\nconst { ccclass, property } = _decorator;\n\nconst getRandomInt = function (min: number, max: number) {\n    var ratio = Math.random();\n    return min + Math.floor((max - min) * ratio);\n};\n\n@ccclass\nexport class HeroSlot extends Component {\n    @property([SpriteFrame])\n    public sfAttributes: SpriteFrame[] = [];\n     @property([SpriteFrame])\n    public sfRanks: SpriteFrame[] = [];\n     @property([SpriteFrame])\n    public sfHeroes: SpriteFrame[] = [];\n     @property([SpriteFrame])\n    public sfBorders: SpriteFrame[] = [];\n    @property(Label)\n    public labelLevel: Label = null!;\n    @property(Sprite)\n    public spHero: Sprite = null!;\n    @property(Sprite)\n    public spRank: Sprite = null!;\n    @property(Sprite)\n    public spAttribute: Sprite = null!;\n    @property(Sprite)\n    public spBorder: Sprite = null!;\n    @property([Sprite])\n    public spStars: Sprite[] = [];\n\n    // use this for initialization\n    onLoad() {\n        this.refresh();\n    }\n\n    refresh() {\n        let bgIdx = getRandomInt(0, this.sfBorders.length);\n        let heroIdx = getRandomInt(0, this.sfHeroes.length);\n        let starIdx = getRandomInt(0, this.spStars.length);\n        let rankIdx = getRandomInt(0, this.sfRanks.length);\n        let attIdx = getRandomInt(0, this.sfAttributes.length);\n        let levelIdx = getRandomInt(0, 100);\n        this.labelLevel.string = 'LV.' + levelIdx;\n        this.spRank.spriteFrame = this.sfRanks[rankIdx];\n        this.refreshStars(starIdx);\n        this.spBorder.spriteFrame = this.sfBorders[bgIdx];\n        this.spAttribute.spriteFrame = this.sfAttributes[attIdx];\n        this.spHero.spriteFrame = this.sfHeroes[heroIdx];\n    }\n\n    refreshStars(count: number) {\n        for (let i = 0; i < this.spStars.length; ++i) {\n            if (i <= count) this.spStars[i].enabled = true;\n            else this.spStars[i].enabled = false;\n        }\n    }\n}\n"]}