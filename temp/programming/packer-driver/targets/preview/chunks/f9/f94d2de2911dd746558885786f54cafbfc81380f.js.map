{"version":3,"sources":["file:///D:/2work/2GameDev/EWasteScavengerSimulatorCocos2d/assets/Libraries/List.ts"],"names":["List","items","Add","item","push","Remove","index","indexOf","splice","Count","length","AllCount","predicate","count","i","ItemAt","Find","find","FindAll","filter","Has","Exists","ForEach","callbackfn","thisArg","forEach","Clear"],"mappings":";;;iBACaA,I;;;;;;;;;;;;;sBAAAA,I,GAAN,MAAMA,IAAN,CACP;AAAA;AAAA,eACWC,KADX,GACwB,EADxB;AAAA;;AAGI;AACJ;AACA;AACWC,QAAAA,GAAG,CAACC,IAAD,EACV;AACI,eAAKF,KAAL,CAAWG,IAAX,CAAgBD,IAAhB;AACH;AAED;AACJ;AACA;;;AACWE,QAAAA,MAAM,CAACF,IAAD,EACb;AACI,cAAMG,KAAK,GAAG,KAAKL,KAAL,CAAWM,OAAX,CAAmBJ,IAAnB,CAAd;;AACA,cAAIG,KAAK,KAAK,CAAC,CAAf,EACA;AACI,iBAAKL,KAAL,CAAWO,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB;AACA,mBAAO,IAAP;AACH;;AACD,iBAAO,KAAP;AACH;AAED;AACJ;AACA;;;AACoB,YAALG,KAAK,GAChB;AACI,iBAAO,KAAKR,KAAL,CAAWS,MAAlB;AACH;;AAEMC,QAAAA,QAAQ,CAAyCC,SAAzC,EACf;AACI,cAAIC,KAAK,GAAG,CAAZ;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKb,KAAL,CAAWS,MAA/B,EAAuCI,CAAC,EAAxC,EACA;AACI,gBAAIF,SAAS,CAAC,KAAKX,KAAL,CAAWa,CAAX,CAAD,CAAb,EACID,KAAK;AACZ;;AACD,iBAAOA,KAAP;AACH;AAED;AACJ;AACA;;;AACWE,QAAAA,MAAM,CAACT,KAAD,EACb;AACI,iBAAO,KAAKL,KAAL,CAAWK,KAAX,CAAP;AACH;AAED;AACJ;AACA;;;AACWU,QAAAA,IAAI,CAAyCJ,SAAzC,EACX;AACI,iBAAO,KAAKX,KAAL,CAAWgB,IAAX,CAAgBL,SAAhB,CAAP;AACH;AAED;AACJ;AACA;;;AACWM,QAAAA,OAAO,CAAyCN,SAAzC,EACd;AACI,iBAAO,KAAKX,KAAL,CAAWkB,MAAX,CAAkBP,SAAlB,CAAP;AACH;AAED;AACJ;AACA;;;AACWQ,QAAAA,GAAG,CAACjB,IAAD,EACV;AACI,iBAAO,KAAKkB,MAAL,CAAYP,CAAC,IAAIA,CAAC,IAAIX,IAAtB,CAAP;AACH;AAED;AACJ;AACA;;;AACWkB,QAAAA,MAAM,CAAyCT,SAAzC,EACb;AACI,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKb,KAAL,CAAWS,MAA/B,EAAuCI,CAAC,EAAxC,EACA;AACI,gBAAIF,SAAS,CAAC,KAAKX,KAAL,CAAWa,CAAX,CAAD,CAAb,EACI,OAAO,IAAP;AACP;;AACD,iBAAO,KAAP;AACH;;AAEMQ,QAAAA,OAAO,CAACC,UAAD,EAA4DC,OAA5D,EACd;AACI,eAAKvB,KAAL,CAAWwB,OAAX,CAAmBF,UAAnB,EAA+BC,OAA/B;AACH;AAED;AACJ;AACA;;;AACWE,QAAAA,KAAK,GACZ;AACI,eAAKzB,KAAL,CAAWS,MAAX,GAAoB,CAApB;AACH;;AApGL,O","sourcesContent":["\nexport class List<T>\n{\n    public items: T[] = [];\n\n    /**\n     * 添加元素到集合末尾\n     */\n    public Add(item: T): void\n    {\n        this.items.push(item);\n    }\n\n    /**\n     * 移除集合中的元素\n     */\n    public Remove(item: T): boolean\n    {\n        const index = this.items.indexOf(item);\n        if (index !== -1)\n        {\n            this.items.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 获取集合大小 \n     */\n    public get Count(): number\n    {\n        return this.items.length;\n    }\n\n    public AllCount<TFunction extends (item: T) => boolean>(predicate: TFunction): number\n    {\n        var count = 0;\n        for (var i = 0; i < this.items.length; i++)\n        {\n            if (predicate(this.items[i]))\n                count++;\n        }\n        return count;\n    }\n\n    /**\n     * 根据索引获取元素\n     */\n    public ItemAt(index: number): T\n    {\n        return this.items[index];\n    }\n\n    /**\n     * 查找符合条件的元素\n     */\n    public Find<TFunction extends (item: T) => boolean>(predicate: TFunction): T\n    {\n        return this.items.find(predicate);\n    }\n\n    /**\n     * 查找所有符合条件的元素\n     */\n    public FindAll<TFunction extends (item: T) => boolean>(predicate: TFunction): T[]\n    {\n        return this.items.filter(predicate);\n    }\n\n    /**\n     * 是否包含传入的元素\n     */\n    public Has(item: T): boolean\n    {\n        return this.Exists(i => i == item);\n    }\n\n    /**\n     * 是否存在符合条件的元素\n     */\n    public Exists<TFunction extends (item: T) => boolean>(predicate: TFunction): boolean\n    {\n        for (var i = 0; i < this.items.length; i++)\n        {\n            if (predicate(this.items[i]))\n                return true;\n        }\n        return false;\n    }\n\n    public ForEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void\n    {\n        this.items.forEach(callbackfn, thisArg);\n    }\n\n    /**\n     * 清空集合\n     */\n    public Clear(): void\n    {\n        this.items.length = 0;\n    }\n}"]}